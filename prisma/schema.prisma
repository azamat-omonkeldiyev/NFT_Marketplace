// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  username         String   @unique
  email            String   @unique
  password         String
  image            String
  role             UserRole @default(ARTIST)
  bio              String?
  globeAccLink     String?
  discordAccLink   String?
  youtubeAccLink   String?
  twitterAccLink   String?
  instagramAccLink String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  createdNFTs    NFT[]        @relation("NFTCreator")
  ownedNFTs      NFT[]        @relation("NFTOwner")
  collections    Collection[]
  auctionResults AuctionResult[]
  followers      Follower[]   @relation("ArtistFollowers")
  following      Follower[]   @relation("UserFollowing")

  @@map("users")
}


enum UserRole {
  ARTIST
  ADMIN
  SUPERADMIN
}

model NFT {
  id         String   @id @default(uuid())
  title      String
  image      String
  price      Decimal  @db.Money
  highestBid Decimal? @db.Money
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  creator   User      @relation("NFTCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String
  owner     User      @relation("NFTOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String
  auctions  Auction[]

  @@index([creatorId])
  @@index([ownerId])
  @@index([price])
  @@map("nfts")
}

model Collection {
  id         String   @id @default(uuid())
  title      String
  images     String[]
  price      Decimal? @db.Money
  highestBid Decimal? @db.Money
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String

  @@index([creatorId])
  @@map("collections")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  image     String
  icon      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Auction {
  id          String   @id @default(uuid())
  description String
  details     String[]
  tags        String[]
  endsAt      DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  nft     NFT             @relation(fields: [nftId], references: [id], onDelete: Cascade)
  nftId   String
  results AuctionResult[]

  @@index([nftId])
  @@index([endsAt])
  @@map("auctions")
}

model AuctionResult {
  id        String   @id @default(uuid())
  bidAmount Decimal  @db.Money
  createdAt DateTime @default(now())

  auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  user      User    @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId   String

  @@index([auctionId])
  @@index([buyerId])
  @@map("auction_results")
}

model Follower {
  id         String   @id @default(uuid())
  artist     User     @relation("ArtistFollowers", fields: [artistId], references: [id], onDelete: Cascade)
  artistId   String
  follower   User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String
  createdAt  DateTime @default(now())

  @@unique([artistId, followerId]) // Bir user bir artistni faqat bir marta follow qila oladi
  @@map("followers")
}
